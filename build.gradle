import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'org.openapi.generator' version '7.6.0'
    id 'java'
    id 'maven-publish'
    id 'pl.allegro.tech.build.axion-release' version '1.20.1'
    id 'org.jetbrains.kotlin.jvm' version '2.2.20'
}

group = 'com.velaris.api'

// --- Versioning (axion-release) ---
scmVersion {
    tag { prefix = 'v' }
    versionIncrementer 'incrementPatch'
}
project.version = scmVersion.version

repositories {
    mavenCentral()
}

// --- Paths for generated code ---
def generatedServerDir = layout.buildDirectory.dir("generated/api").get().asFile
def generatedKotlinClientDir = layout.buildDirectory.dir("generated/kotlin-client").get().asFile

java {
    toolchain { languageVersion = JavaLanguageVersion.of(21) }
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

// --- Source sets ---
sourceSets {
    main {
        java.srcDir("${generatedServerDir}/src/main/java")
        java.srcDir("${generatedKotlinClientDir}/src/main/kotlin")
    }
}

// --- Dependencies ---
dependencies {
    implementation(libs.jackson.databind.nullable)
    implementation(libs.spring.boot.starter.web)
    implementation(libs.spring.boot.starter.validation)
    compileOnly(libs.swagger.annotations)
    compileOnly(libs.springdoc.openapi.ui)

    implementation(libs.retrofit)
    implementation(libs.retrofit.converter.scalars)
    implementation(libs.retrofit.converter.kotlinx.serialization)
    implementation(libs.okhttp3)
    implementation(libs.okhttp3.logging.interceptor)
    implementation(libs.jetbrains.kotlinx.serialization.json)
    implementation(libs.jetbrains.kotlinx.coroutines.core)
}

// --- OpenAPI server generation ---
tasks.register("openApiGenerateServer", GenerateTask) {
    generatorName.set("spring")
    inputSpec.set("$rootDir/api/velaris-api.yaml")
    outputDir.set(generatedServerDir.toString())

    packageName.set("com.velaris")
    apiPackage.set("com.velaris.api")
    modelPackage.set("com.velaris.api.model")
    invokerPackage.set("com.velaris.api.invoker")

    configOptions.set([
            "interfaceOnly": "true",
            "skipDefaultInterface": "true",
            "dateLibrary": "java8",
            "useSpringBoot3": "true",
            "useTags": "true"
    ])

    inputs.file(inputSpec)
    outputs.dir(generatedServerDir)

    doFirst { delete generatedServerDir }
}

// --- OpenAPI Kotlin client generation ---
tasks.register("openApiGenerateKotlinClient", GenerateTask) {
    generatorName.set("kotlin")
    inputSpec.set("$rootDir/api/velaris-api.yaml")
    outputDir.set(generatedKotlinClientDir.toString())

    packageName.set("com.velaris.api.client")
    apiPackage.set("com.velaris.api.client")
    modelPackage.set("com.velaris.api.client.model")
    invokerPackage.set("com.velaris.api.client.invoker")

    configOptions.set([
            "library": "jvm-retrofit2",
            "dateLibrary": "java8",
            "serializationLibrary": "kotlinx_serialization",
            "useCoroutines": "true"
    ])

    inputs.file(inputSpec)
    outputs.dir(generatedKotlinClientDir)

    doFirst { delete generatedKotlinClientDir }
}

// --- Ensure generation before compilation ---
tasks.withType(JavaCompile).configureEach {
    dependsOn tasks.named("openApiGenerateServer")
}

tasks.withType(KotlinCompile).configureEach {
    compilerOptions {
        jvmTarget.set(JvmTarget.JVM_21)
        freeCompilerArgs.addAll([
                "-opt-in=kotlinx.serialization.ExperimentalSerializationApi"
        ])
    }
    dependsOn tasks.named("openApiGenerateServer")
    dependsOn tasks.named("openApiGenerateKotlinClient")
}

// --- Jar dla klienta Kotlin ---
tasks.register('kotlinClientJar', Jar) {
    archiveBaseName.set("kotlin-client")
    dependsOn tasks.named("openApiGenerateKotlinClient")
    from(generatedKotlinClientDir)

    inputs.dir(generatedKotlinClientDir)
    outputs.file(layout.buildDirectory.file("libs/kotlin-client.jar"))
}

// --- Make Kotlin Jar part of assemble/build ---
tasks.named("assemble") {
    dependsOn("kotlinClientJar")
}

// --- Publishing ---
publishing {
    publications {
        // Server
        create("server", MavenPublication) {
            from components.java
            groupId = project.group
            artifactId = "velaris-api"
            version = project.version
        }

        // Kotlin client
        create("kotlinClient", MavenPublication) {
            groupId = project.group
            artifactId = "velaris-api-client"
            version = project.version
            artifact(tasks.named("kotlinClientJar"))
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Velaris-app/velaris-api")
            credentials {
                username = System.getenv("GITHUB_ACTOR") ?: project.findProperty("gpr.user")
                password = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.token")
            }
        }
    }
}